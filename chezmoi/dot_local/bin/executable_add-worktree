#!/usr/bin/env bash

set -o errexit    # Exit on error. Append || true if you expect an error.
set -o errtrace   # Exit on error inside any functions or subshells.
set -o noclobber  # don't allow overwriting files
set -o nounset    # Don't allow use of undefined vars. Use ${VAR:-} to use an undefined VAR.
set -o pipefail   # Produce a failure return code if any pipeline command errors
shopt -s failglob # Cause globs that don't get expanded to cause errors

# Usage info
show_help_and_exit() {
    cat >&2 <<EOF
Usage: ${0##*/} [-h] [-c] branch directory

    -h         display this help and exit
    -c         create the branch before creating the worktree
    branch     branch to switch to in the worktree
    directory  where to locate the worktree
EOF

    exit 3
}

CREATE=1  # Default is false.

while getopts "ch" opt; do
    case "${opt}" in
    c)
        CREATE=0  # True.
        ;;
    h)
        show_help_and_exit
        ;;
    :)
        echo "Option -${OPTARG} requires an argument." >&2
        show_help_and_exit
        ;;
    '?')
        show_help_and_exit
        ;;
    *)
        echo "Unimplemented option: -${OPTARG}" >&2
        show_help_and_exit
        ;;
    esac
done
shift "$((OPTIND - 1))" # Shift off the options and optional --.
# Everything that's left in "$@" is a non-option.

BRANCH="${1:-}"
DIRECTORY="${2:-}"

test -z "${BRANCH}" && echo "Must specify branch!" && exit 3
test -z "${DIRECTORY}" && DIRECTORY="${BRANCH}"

CURRENT_DIR="$(pwd)"

echo "Adding worktree for branch ${BRANCH}..."

if [[ "${CREATE}" ]]; then
    git worktree add ../"${DIRECTORY}" -b "${BRANCH}"
else
    git worktree add ../"${DIRECTORY}" "${BRANCH}"
fi

cd ../"${DIRECTORY}"

git push --set-upstream origin "${BRANCH}"

cp --update=none "${HOME}"/.git-template/* .

cp --update=none "${HOME}"/.git-template/.devcontainer/* .devcontainer/.

cd "${CURRENT_DIR}"
