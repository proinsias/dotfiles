{{ if eq .chezmoi.os "windows" }}
# Set strict error handling
$ErrorActionPreference = "Stop"  # Exit on error
Set-StrictMode -Version Latest   # Disallow undefined variables

# Prevent overwriting files (similar to noclobber)
function SafeWrite-File {
    param (
        [string]$Path,
        [string]$Content
    )
    if (Test-Path $Path) {
        Write-Error "File '$Path' already exists. Aborting to prevent overwrite."
    } else {
        Set-Content -Path $Path -Value $Content
    }
}

$gitDirs = Get-ChildItem "$HOME/git" -Directory

$jobs = @()

foreach ($dir in $gitDirs) {
    $jobs += Start-Job -ScriptBlock {
        param($path)
        Set-Location $path
        pre-commit autoupdate
    } -ArgumentList $dir.FullName
}

# Wait for all jobs to complete
$jobs | ForEach-Object { $_ | Wait-Job }

# Optionally, collect and display output
$jobs | ForEach-Object {
    Write-Host "Output from $($_.Id):"
    Receive-Job $_
    Remove-Job $_
}
{{ else -}}
#!/usr/bin/env bash

set -o errexit                # Exit on error. Append || true if you expect an error.
set -o errtrace               # Exit on error inside any functions or subshells.
set -o noclobber              # Don't allow overwriting files.
set -o nounset                # Don't allow use of undefined vars. Use ${VAR:-} to use an undefined VAR.
set -o pipefail               # Produce a failure return code if any pipeline command errors.
shopt -s failglob             # Cause globs that don't get expanded to cause errors.
shopt -s globstar 2>/dev/null # Match all files and zero or more sub-directories.

# shellcheck disable=SC2312
find "${HOME}"/git/ \
    -maxdepth 1 \
    -mindepth 1 \
    -type d \
    -print \
    -exec sh -c \
        'cd {} && test -f .pre-commit-config.yaml && pre-commit autoupdate' \;
{{ end }}
