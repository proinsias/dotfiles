#!/usr/bin/env bash

# Intel homebrew
test -f /usr/local/bin/brew && eval "$(/usr/local/bin/brew shellenv)"
# M1 home-brew. Do second in case we are also using Intel via Rosetta.
test -f /opt/homebrew/bin/brew && eval "$(/opt/homebrew/bin/brew shellenv)"

update () {
    export HOMEBREW_PREFIX="$(brew --prefix)"

    export host="$(hostname -s)"
    export dt="$(gdate --iso-8601)"

    export RUBY_HOME="${HOMEBREW_PREFIX}/opt/ruby"
    export RUBY_VERSION="3.1.0"
    export GEM_HOME="${RUBY_HOME}/lib/ruby/gems/${RUBY_VERSION}"
    export GEM_PATH="${RUBY_HOME}/lib/ruby/gems/${RUBY_VERSION}"

    export PATH="${HOME}/bin:${HOME}/.local/bin:/usr/local/google-cloud-sdk/bin:${RUBY_HOME}/bin${PATH:+:${PATH}}"

    if type apt-get > /dev/null 2>&1 ; then
        echo -e "apt-get_${dt}_${host}"
        export DEBIAN_FRONTEND="noninteractive"
        apt-get update --yes
        apt-get upgrade --yes
        echo -e ""
    fi

    echo -e "brew_${dt}_${host}"

    if type brew > /dev/null 2>&1 ; then
        echo -e "\nbrew update:" ; brew update
        echo -e "\nbrew upgrade:" ; brew upgrade
        echo -e "\nbrew cleanup:" ; brew cleanup
        echo -e "\nbrew outdated:" ; brew outdated
    else
        echo -e "\nbrew not found!"
    fi

    if type mas > /dev/null 2>&1 ; then
        echo -e "\nmas upgrade:" ; mas upgrade
    fi

    if type pyenv > /dev/null 2>&1 ; then
        # Need to run this after upgrading pyenv via brew.
        echo -e "\npyenv rehash:" ; pyenv rehash
    else
        echo -e "\npyenv not found!"
    fi

    echo -e ""

    if type build-docker > /dev/null 2>&1 ; then
        echo -e "build-docker_${dt}_${host}"
        build-docker
        echo -e ""
    fi

    if type docker-cleanup > /dev/null 2>&1 ; then
        echo -e "docker-cleanup_${dt}_${host}"
        docker-cleanup
        echo -e ""
    fi

    if type gcloud > /dev/null 2>&1 ; then
        echo -e "gcloudupdate_${dt}_${host}"

        echo -e "\ngcloud components list 2>&1 | grep \"Update Available\":"
        gcloud components list 2>&1 | grep "Update Available"

        echo -e "To upgrade, run: sudo gcloud components update --quiet"

        echo -e ""
    fi

    echo -e "gemupdate_${dt}_${host}"

    if type gem > /dev/null 2>&1 ; then
        echo -e "\ngem update --system:" ; gem update --system --no-document
        echo -e "\ngem update:" ; gem update --no-document
        echo -e "\ngem cleanup:" ; yes n | gem cleanup
    else
        echo -e "\ngem not found!"
    fi

    echo -e ""

    echo -e "npmupdate_${dt}_${host}"

    if type npm > /dev/null 2>&1 ; then
        echo -e "\nnpm update --global:" ; npm update --global
    else
        echo -e "\nnpm not found!"
    fi

    echo -e ""

    echo -e "pipxupdate_${dt}_${host}"

    if type pipx > /dev/null 2>&1 ; then
        echo -e "\npipx upgrade-all:" ; pipx upgrade-all
    else
        echo -e "\npipx not found!"
    fi

    echo -e ""

    echo -e "pre-commit-autoupdate_${dt}_${host}"

    if type pre-commit-autoupdate > /dev/null 2>&1 ; then
        pre-commit-autoupdate
    else
        echo -e "\npre-commit-autoupdate not found!"
    fi

    echo -e ""

    if type ~/favs/gh/dotfiles/bin/stow.sh > /dev/null 2>&1 ; then
        echo -e "stow_${dt}_${host}"
        ~/favs/gh/dotfiles/bin/stow.sh
        echo -e ""
    fi

    echo -e "tldr_${dt}_${host}"

    if type tldr > /dev/null 2>&1 ; then
        tldr --update
    else
        echo -e "\npre-commit-autoupdate not found!"
    fi

    echo -e ""

    echo -e "uncommitted_${dt}_${host}"

    if type uncommitted > /dev/null 2>&1 ; then
        echo -e "\nuncommitted:"
        uncommitted --non-tracking --untracked --stash \
        -I "old/proinsias" -I ".cache" "${HOME}"
    else
        echo -e "\nuncommitted not found!"
    fi

    echo -e ""
}

tmpfile="$(mktemp /tmp/lingon.XXXXXX)"

update 2>&1 | tee -a "${tmpfile}"

"${HOME}"/.local/bin/ntfy \
  --backend slack \
  --config "${HOME}/.ntfy.yml" \
  send "$(cat ${tmpfile})"
