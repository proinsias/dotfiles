#!/usr/bin/env bash

# Intel homebrew
test -f /usr/local/bin/brew && eval "$(/usr/local/bin/brew shellenv)"
# M1 home-brew. Do second in case we are also using Intel via Rosetta.
test -f /opt/homebrew/bin/brew && eval "$(/opt/homebrew/bin/brew shellenv)"

export HOMEBREW_PREFIX="$(brew --prefix)"


export host="$(hostname -s)"
export dt="$(gdate --iso-8601)"


brewup () {
    echo -e "brewup_${dt}_${host}"

    if type brew > /dev/null 2>&1 ; then
        echo -e "\nbrew update:" ; brew update
        echo -e "\nbrew upgrade:" ; brew upgrade
        echo -e "\nbrew cleanup:" ; brew cleanup
        echo -e "\nbrew outdated:" ; brew outdated
    else
        echo -e "\nbrew not found!"
    fi

    if type mas > /dev/null 2>&1 ; then
        echo -e "\nmas upgrade:" ; mas upgrade
    else
        echo -e "\nmas not found!"
    fi

    if type pyenv > /dev/null 2>&1 ; then
        # Need to run this after upgrading pyenv via brew.
        echo -e "\npyenv rehash:" ; pyenv rehash
    else
        echo -e "\npyenv not found!"
    fi

    echo -e ""
}


gemupdate() {
    echo -e "gemupdate_${dt}_${host}"

    export RUBY_HOME="${HOMEBREW_PREFIX}/opt/ruby"
    export PATH="${RUBY_HOME}/bin:${PATH}"
    export RUBY_VERSION="2.6.0"
    export GEM_HOME="${RUBY_HOME}/lib/ruby/gems/${RUBY_VERSION}"
    export GEM_PATH="${RUBY_HOME}/lib/ruby/gems/${RUBY_VERSION}"

    gem="${RUBY_HOME}"/bin/gem

    if type "${gem}" > /dev/null 2>&1 ; then
        echo -e "\ngem update --system:" ; "${gem}" update --system --no-document
        echo -e "\ngem update:" ; "${gem}" update --no-document
        echo -e "\ngem cleanup:" ; yes n | "${gem}" cleanup
    else
        echo -e "\ngem not found!"
    fi

    echo -e ""
}


pipxupdate () {
    echo -e "pipxupdate_${dt}_${host}"

    if type pipx > /dev/null 2>&1 ; then
        echo -e "\npipx upgrade-all:" ; pipx upgrade-all
    else
        echo -e "\npipx not found!"
    fi

    echo -e ""
}


npmupdate() {
    echo -e "npmupdate_${dt}_${host}"

    if type npm > /dev/null 2>&1 ; then
        echo -e "\nnpm update --global:" ; npm update --global
    else
        echo -e "\nnpm not found!"
    fi

    echo -e ""
}


run_uncommitted() {
    echo -e "run_uncommitted_${dt}_${host}"

    uncommitted="${HOME}/.local/bin/uncommitted"

    if type "${uncommitted}" > /dev/null 2>&1 ; then
        echo -e "\nuncommitted:"
        "${uncommitted}" --non-tracking --untracked --stash \
        -I "old/proinsias" -I ".cache" "${HOME}"
    else
        echo -e "\nuncommitted not found!"
    fi

    echo -e ""
}

gcloudupdate() {
    echo -e "gcloudupdate_${dt}_${host}"

    gcloud="/usr/local/google-cloud-sdk/bin/gcloud"

    if type "${gcloud}" > /dev/null 2>&1 ; then

        echo -e "\ngcloud components list 2>&1 | grep \"Update Available\":"
        "${gcloud}" components list 2>&1 | grep "Update Available"

        echo -e "To upgrade, run: sudo gcloud components update --quiet"

    else
        echo -e "\ngcloud not found!"
    fi

    echo -e ""
}

dockercleanup() {
    echo -e "docker-cleanup_${dt}_${host}"

    dc="${HOME}/bin/docker-cleanup"

    if type "${dc}" > /dev/null 2>&1 ; then
        "${dc}"
    else
        echo -e "\ndocker-cleanup not found!"
    fi

    echo -e ""
}


builddocker() {
    echo -e "build-docker_${dt}_${host}"

    bd="${HOME}/bin/build-docker"

    if type "${bd}" > /dev/null 2>&1 ; then
        "${bd}"
    else
        echo -e "\nbuild-docker not found!"
    fi

    echo -e ""
}

precommit() {
    echo -e "pre-commit-autoupdate_${dt}_${host}"

    pca="${HOME}/bin/pre-commit-autoupdate"

    if type "${pca}" > /dev/null 2>&1 ; then
        "${pca}"
    else
        echo -e "\npre-commit-autoupdate not found!"
    fi

    echo -e ""
}

tmpfile="$(mktemp /tmp/lingon.XXXXXX)"

brewup 2>&1 | tee -a "${tmpfile}"

gcloudupdate 2>&1 | tee -a "${tmpfile}"

gemupdate 2>&1 | tee -a "${tmpfile}"

pipxupdate 2>&1 | tee -a "${tmpfile}"

npmupdate 2>&1 | tee -a "${tmpfile}"

run_uncommitted 2>&1 | tee -a "${tmpfile}"

dockercleanup 2>&1 | tee -a "${tmpfile}"

builddocker 2>&1 | tee -a "${tmpfile}"

precommit 2>&1 | tee -a "${tmpfile}"

"${HOME}"/.local/bin/ntfy \
  --backend slack \
  --config "${HOME}/.ntfy.yml" \
  send "$(cat ${tmpfile})"
