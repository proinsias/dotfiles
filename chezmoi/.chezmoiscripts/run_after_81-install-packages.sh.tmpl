{{  if eq .chezmoi.os "windows" }}
# Set strict error handling
$ErrorActionPreference = "Stop"  # Exit on error
Set-StrictMode -Version Latest   # Disallow undefined variables

# Prevent overwriting files (similar to noclobber)
function SafeWrite-File {
    param (
        [string]$Path,
        [string]$Content
    )
    if (Test-Path $Path) {
        Write-Error "File '$Path' already exists. Aborting to prevent overwrite."
    } else {
        Set-Content -Path $Path -Value $Content
    }
}

# winget hash: {{ include "./private_dot_config/winget/winget-config.yaml" | sha256sum }}
Write-Host ""
Write-Host "Install winget packages."

winget configure -f ./private_dot_config/winget/winget-config.yaml

Write-Host ""
Write-Host "Install mise packages."

Write-Host ""
mise install --yes

{{ else }}
#!/usr/bin/env bash

set -o errexit                # Exit on error. Append || true if you expect an error.
set -o errtrace               # Exit on error inside any functions or subshells.
set -o noclobber              # Don't allow overwriting files.
set -o nounset                # Don't allow use of undefined vars. Use ${VAR:-} to use an undefined VAR.
set -o pipefail               # Produce a failure return code if any pipeline command errors.
shopt -s failglob             # Cause globs that don't get expanded to cause errors.
shopt -s globstar 2>/dev/null # Match all files and zero or more sub-directories.

echo
echo
echo "Install packages."

echo
echo "Install homebrew packages."

# For homebrew
# Adds $HOMEBREW_PREFIX/bin as prefix to PATH.
{{ if eq .chezmoi.os "darwin" }}
# Intel homebrew
test -f /usr/local/bin/brew && OUTPUT="$(/usr/local/bin/brew shellenv)" && eval "${OUTPUT}"
# M1 home-brew â€“ do second in case we are also using Intel
# via Rosetta.
test -f /opt/homebrew/bin/brew && OUTPUT="$(/opt/homebrew/bin/brew shellenv)" && eval "${OUTPUT}"
{{ else if eq .chezmoi.os "linux" }}
# homebrew linuxbrew
test -d /home/linuxbrew/.linuxbrew && OUTPUT="$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)" && eval "${OUTPUT}"
# shellcheck disable=SC2086
test -d "${HOME}/.linuxbrew/" && OUTPUT="$(${HOME}/.linuxbrew/bin/brew shellenv)" && eval "${OUTPUT}"
{{ end }}

# Update Homebrew
echo
brew update

# Brewfile hash: {{ include "./private_dot_config/homebrew/Brewfile.tmpl" | sha256sum }}
{{ if .test }}
if ! command brew bundle check --file "${TEST_HOME}/.config/homebrew/Brewfile" &> /dev/null; then
    echo
    echo "The Brewfile's dependencies are not satisfied. Running brew bundle install --global..."
    brew bundle install --no-upgrade --file "${TEST_HOME}/.config/homebrew/Brewfile"
else
    echo "The Brewfile's dependencies are satisfied. Skipping brew bundle install --global..."
fi
{{ else }}
if ! command brew bundle check --global &> /dev/null; then
    echo
    echo "The Brewfile's dependencies are not satisfied. Running brew bundle install --global..."
    brew bundle install --no-upgrade --global
else
    echo "The Brewfile's dependencies are satisfied. Skipping brew bundle install --global..."
fi
{{ end }}

echo
echo "Install mise packages."

echo
mise install --yes

{{ end }}
