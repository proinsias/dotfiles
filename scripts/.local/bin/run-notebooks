#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# /// script
# dependencies = [
#   "nbconvert",
#   "nbformat",
#   "ntfy",
#   "typer",
# ]
# [tool.uv]
# exclude-newer = "2024-10-14T00:00:00Z"
# ///

import glob
import typing

import nbformat
import typer
from nbconvert.preprocessors import ExecutePreprocessor
from nbconvert.preprocessors.execute import CellExecutionError


RUN_PATH_HELP_STR = 'The path the notebook will be run from'
TIMEOUT_HELP_STR = 'Length of time (in secs) a cell can run before raising TimeoutError; a values of -1 disables timeout'

try:
    import ntfy
    import ntfy.config

    CONFIG = ntfy.config.load_config()
    CONFIG['backends'] = ['slack']
except:
    pass


def ntfy_msg(msg):
    try:
        ntfy.notify(msg, 'run-notebooks.py', config=CONFIG)
    except:
        pass


def run_notebooks(
    file_list: typing.Optional[typing.List[str]] = typer.Argument(None),
    run_path: typing.Optional[str] = typer.Option('.', '--run-path', '-r', help=RUN_PATH_HELP_STR, show_default=True),
    timeout: typing.Optional[int] = typer.Option(-1, '--timeout', '-t', help=TIMEOUT_HELP_STR, show_default=True),
) -> None:
    """
    Runs the set of Jupyter notebooks provided as an argument.
    If no argument is provided, runs all Jupyter notebooks present in the directory.
    """

    if file_list is None:
        file_list = glob.glob('*.ipynb')

    # Check list of notebooks.
    notebooks = []
    print('Notebooks to run:')
    for f in file_list:
        # Find notebooks but not notebooks previously output from this script.
        if f.endswith('.ipynb') and not f.endswith('_out.ipynb'):
            print(f[:-6])
            notebooks.append(f[:-6])  # Want the filename without '.ipynb'.

    # Execute notebooks and output
    num_notebooks = len(notebooks)
    print('*****')
    for i, n in enumerate(notebooks):
        n_out = n + '_out'
        with open(n + '.ipynb') as f:
            nb = nbformat.read(f, as_version=4)
            ep = ExecutePreprocessor(timeout=timeout, kernel_name='python3')
            try:
                print('Running', n, ':', i+1, '/', num_notebooks)
                out = ep.preprocess(nb, {'metadata': {'path': run_path}})
            except CellExecutionError:
                out = None
                msg = 'Error executing the notebook "%s".\n' % n
                msg += 'See notebook "%s" for the traceback.' % n_out
                print(msg)
                ntfy_msg(msg)
            except TimeoutError:
                msg = 'Timeout executing the notebook "%s".\n' % n
                print(msg)
                ntfy_msg(msg)
            finally:
                msg = 'Finish executing the notebook "%s".\n' % n
                ntfy_msg(msg)

                # Write output file
                with open(n_out + '.ipynb', mode='wt') as f:
                    nbformat.write(nb, f)


if __name__ == '__main__':
    typer.run(run_notebooks)
