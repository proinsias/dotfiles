#!/usr/bin/env bash

set -o errexit    # Exit on error. Append || true if you expect an error.
set -o errtrace   # Exit on error inside any functions or subshells.
set -o noclobber  # don't allow overwriting files
set -o nounset    # Don't allow use of undefined vars. Use ${VAR:-} to use an undefined VAR.
set -o pipefail   # Produce a failure return code if any pipeline command errors
shopt -s failglob # Cause globs that don't get expanded to cause errors

echo -e "\n\nInstall uv tools."

if ! pre-commit --version 2>&1 | grep -q pre-commit-uv ; then
    echo -e "\nInstalling pre-commit."
    uv tool install pre-commit --with pre-commit-uv --force-reinstall
fi

# uv tools hash: {{ include "./private_dot_config/uv/tools.txt" | sha256sum }}

echo -e "\nInstalling individual uv tools."

# create a temp file list with cleaned tool names
tmpfile="$(mktemp)"
# filter comments/blank lines
grep -vE '^\s*(#|$)' "${HOME}/.config/uv/tools.txt" >> "${tmpfile}"

xargs -P0 -I{} uv tool install --force -- "{}" < "${tmpfile}"

echo -e "\nInstalling uv tools with requirements."

# flake8 req hash: {{ include "./private_dot_config/uv/flake8-reqs.txt" | sha256sum }}
uv tool install --with-requirements "${HOME}/.config/uv/flake8-reqs.txt" --force flake8

# mdformat req hash: {{ include "./private_dot_config/uv/mdformat-reqs.txt" | sha256sum }}
uv tool install --with-requirements "${HOME}/.config/uv/mdformat-reqs.txt" --force mdformat

uv tool install --with ipython_genutils --force nbdime

# ntfy req hash: {{ include "./private_dot_config/uv/ntfy-reqs.txt" | sha256sum }}
uv tool install --with-requirements "${HOME}/.config/uv/ntfy-reqs.txt" --force ntfy

# pytest req hash: {{ include "./private_dot_config/uv/pytest-reqs.txt" | sha256sum }}
uv tool install --with-requirements "${HOME}/.config/uv/pytest-reqs.txt" --force pytest
